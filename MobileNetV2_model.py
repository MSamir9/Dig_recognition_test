# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sbo7k631oZM-Hq_yhhkSTkph7CpACeGZ
"""

from tensorflow import keras
import numpy as np
from keras.utils import to_categorical

from tensorflow.keras.datasets import mnist
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
from tensorflow.keras.applications import NASNetMobile
from tensorflow.keras.applications import NASNetLarge

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications import ResNet50V2
from tensorflow.keras.applications import VGG19
from tensorflow.keras.applications import InceptionResNetV2	
from tensorflow.keras.layers import Input
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from keras.utils import to_categorical
from sklearn.metrics import confusion_matrix


from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from keras.utils import np_utils
import cv2

(x_train, y_train), (x_test, y_test) = mnist.load_data()

def resize(img_array):
    arr = np.empty((img_array.shape[0], 32, 32))

    for i in range(len(img_array)):
        img = img_array[i].reshape(28, 28).astype('uint8')
        img = cv2.resize(img, (32, 32))
        img = img.astype('float32')/255
        arr[i] = img
        
    return arr


x_train = resize(x_train)
x_test = resize(x_test)
x_train = np.stack((x_train,)*3, axis=-1)
x_test = np.stack((x_test,)*3, axis=-1)
y_train = to_categorical(y_train) 

x_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.2, random_state=2020)

baseModel =   MobileNetV2 (weights="imagenet", include_top=False, input_tensor=Input(shape=(32, 32, 3))) #vgg19

headModel = baseModel.output
headModel = Flatten(name="flatten")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(10, activation="softmax")(headModel)

model = Model(inputs=baseModel.input, outputs=headModel)

INIT_LR = 1e-3
EPOCHS = 10
BS = 32
print("[INFO] compiling model...")
opt = Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS)
model.compile(loss="categorical_crossentropy", optimizer=opt, metrics=["accuracy"])

# train the head of the network

model.fit(x_train, y_train, validation_data=(x_test, y_test), 
          epochs=10, batch_size=BS)

from sklearn.metrics import classification_report

class_to_label_map = {'zero' : 0, 'one' : 1, 'two' : 2, 'three': 3, "four": 4, "five": 5, "six": 6, "seven" : 7, "eight": 8, "nine": 9}

print("[INFO] evaluating network...")
predIdxs = model.predict(x_test, batch_size=BS)

predIdxs = np.argmax(predIdxs, axis=1)
print(classification_report(y_test.argmax(axis=1), predIdxs, target_names= class_to_label_map))

# show the confusion matrix and accuracy

cm = confusion_matrix(y_test.argmax(axis=1), predIdxs)

total = sum(sum(cm))
s=0
for i in range(0,10):
  s=s+cm[i,i]

acc =  s/ total

print(cm)
print("acc: {:.4f}".format(acc))

# Save whole model for download
model.save("model.h5")
!pip install tensorflowjs

!tensorflowjs_converter --input_format keras '/content/model.h5' '/content/model'